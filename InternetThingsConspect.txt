<> указанные ниже(при описании команд) не являются частью синтаксиса

Github - система контроля(за разработчиками?) и управления версиями(кода). Позволяет быстро откатить поломаный "мейн" до состояния предыдущей версии. Следит за тем кто, когда, в каких файлах и какие строки кода поменял. При откате будет клонирован поломанный "мейн". Это не все полезные на практике возможности, есть еще много других

GitFlow - методология о том, как работать с ветками на GitHub
Ветки:
Мейн(мастер)	- отправляются в продакшн (рабочий стабильный код)
Девелоп		- ветки, которые еще не являются мейн
Фичи		- ветки для разработки новых функций
Релиз		- для подготовки к мейну?(для тестирования, дебага)
Хотфикс		- для быстрого исправления критических ошибок

Внутри каждого каталога(папки, директории) можно создать коммиты(версии) и ветки. По умолчанию изначально 1 ветка и 1 коммит. Внутри ветки можно делать другие ветки с другими коммитами. Внутри коммита можно работать только с определенной версией файла.

Git - приложение скачиваемое на комп
Команды Git:--------------------------------------------------------------
ВЗАИМОДЕЙСТВИЕ С GITHUB:--------------------------------------------------------------
git clone <URL>			- копирование на комп(всего проекта и всех веток) из репозитория на GitHub?
git push origin <имя ветки>	- перенесение ветки на удаленный репозиторий и там создать её. Также команда используется для обновелния ветки репозитория
origin				- замена <URL>. Привязанный командой git remote add origin <URL> удаленный репозиторий
git pull			- противоположная git push origin <имя ветки>, чтобы перенести из удаленного репозитория все изменения, которые были сделаны в ветке

ДОБАВЛЕНИЕ УДАЛЕНИЕ В/ИЗ КОММИТ(А):--------------------------------------------------------------
git add <имя файла>		- +1 файл, готовый к коммиту
git add .			- +все файлы в папке, готовые к коммиту
git restore --staged <файл>	- убрать из коммита файл

КОМАНДЫ СОЗДАНИЯ:--------------------------------------------------------------
git init			- создание локального репозитория (находясь в нужной папке/каталоге/директории)
git commit -m "комментарий"	- создание коммита(версии) кода (добавленных файлов командой git add). Установление уникального кода - хэша, по которому можно вернуться к данной версии
-m "комментарий"		- атрибут означающий возможность добавления описания к данному коммиту
git branch <имя ветки>		- создание ветки

КОМАНДЫ ПРОСМОТРА:--------------------------------------------------------------
git branch			- получение всего списка веток. * указывает на ветку, в которой находимся
git log				- история всех коммитов с их хешами и комментариями. Не выведет те коммиты, которые являются "будущими" по отношению к коммиту, в котором я сейчас. То есть они удаляются автоматически при переходе в более ранний коммит?
git status			- просмотр изменений (cохраненных/несохраненных uncommited) файлов в репозитории

КОМАНДЫ НАСТРОЕК:--------------------------------------------------------------
git remote add origin <URL>		- соединяет локальный репозиторий с удалённым, доступным по данному URL
git config --global user.name "имя"	- читает/меняет текущую  конфигурацию(настройки?) гит на моем компе
--global				- атрибут означающий применение ко всем файлам
user.name "имя"				- установить имя 
user.email "имя почты"			- установить имя почты

ОСТАЛЬНЫЕ КОМАНДЫ:--------------------------------------------------------------
git checkout <хэш коммита>	- переход к закоммиченной версии. Если я правильно понял, то остальные коммиты удаляются 
git checkout <имя ветки>	- "переключение"? на ветку. Все новые коммиты будут делаться внутри этой ветки

git rebase <имя ветки>		- перемещение коммитов из данной ветки в ту, на которой находится пользователь
git merge <имя ветки>		-  для объединения изменений из удаленной ветки с локальной веткой. куда?мне на комп или на ГХ?всех изменений в главную? ветку
git revert <хэш коммита>	- откат (если все сделал и закоммитил). Отменяет указанный коммит и возвращает код в указанное состояние

git switch -c <new-branch-name>		- 

"Индекс" гита	- хранилище всех файлов, готовых к коммиту
Коммит		- конструктивные элементы временной шкалы проекта Git

Процесс подготовки к мерджу ветки на GitHub
1.Код ревью		- проверка на ошибки кода, который написал разработчик
2.Пул(мердж) реквест	- функционал репозитория, позволяющий предложить внести изменения из моей ветки в основную ветку проекта. Пул реквест делается перенесением ветки на удаленный репозиторий
3.аппрув		- подтверджение
4. Мердж		- git merge <имя ветки>